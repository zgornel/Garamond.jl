var documenterSearchIndex = {"docs":
[{"location":"api/#","page":"API Reference","title":"API Reference","text":"","category":"page"},{"location":"api/#","page":"API Reference","title":"API Reference","text":"Modules = [Garamond]","category":"page"},{"location":"api/#Garamond.BruteTreeIndex","page":"API Reference","title":"Garamond.BruteTreeIndex","text":"BruteTree index type for storing vectors. It is a wrapper around a BruteTree NN structure and performs brute search using a distance-based similarity between vectors.\n\n\n\n\n\n","category":"type"},{"location":"api/#Garamond.HNSWIndex","page":"API Reference","title":"Garamond.HNSWIndex","text":"HNSW index type for storing vectors. It is a wrapper around a HierarchicalNSW (Hierarchical Navigable Small Worlds) NN graph structure and performs a very efficient search using a distance-based similarity between vectors.\n\nReferences\n\nY. A. Malkov, D.A. Yashunin \"Efficient and robust approximate nearest neighbor search using Hierarchical Navigable Small World graphs\"\n\n\n\n\n\n","category":"type"},{"location":"api/#Garamond.IVFIndex","page":"API Reference","title":"Garamond.IVFIndex","text":"IVFADC index type for storing vectors. It is a wrapper around a IVFADCIndex (inverted file system with asymmetric distance computation) structure and performs a billion-scale search using a distance-based similarity between vectors.\n\nReferences\n\nJègou et al. \"Product quantization for nearest neighbor search\"\nBaranchuk et al. \"Revisiting the inverted indices for billion-scale approximate nearest neighbors\"\n\n\n\n\n\n","category":"type"},{"location":"api/#Garamond.KDTreeIndex","page":"API Reference","title":"Garamond.KDTreeIndex","text":"K-D Tree index type for storing vectors. It is a wrapper around a KDTree NN structure and performs a more efficient search using a distance-based similarity between vectors.\n\n\n\n\n\n","category":"type"},{"location":"api/#Garamond.NaiveIndex","page":"API Reference","title":"Garamond.NaiveIndex","text":"Naive index type for storing vectors. It is a wrapper around a vector of embeddings and performs brute search using the cosine similarity between vectors.\n\n\n\n\n\n","category":"type"},{"location":"api/#Garamond.NoopIndex","page":"API Reference","title":"Garamond.NoopIndex","text":"Noop index type for storing vectors. Returns empty vectors of indexes, scores. Useful when search is done only in the db.\n\n\n\n\n\n","category":"type"},{"location":"api/#Garamond.SearchEnv","page":"API Reference","title":"Garamond.SearchEnv","text":"Search environment object. It contains all the data, searchers\nand additional structures needed by the engine to function.\n\n\n\n\n\n","category":"type"},{"location":"api/#Garamond.SearchResult","page":"API Reference","title":"Garamond.SearchResult","text":"Object that stores the search results from a single searcher.\n\n\n\n\n\n","category":"type"},{"location":"api/#Garamond.Searcher","page":"API Reference","title":"Garamond.Searcher","text":"Search object. It contains all the indexed data and related\n\nconfiguration that allows for searches to be performed.\n\n\n\n\n\n","category":"type"},{"location":"api/#Garamond.build_search_env-Tuple{AbstractString}","page":"API Reference","title":"Garamond.build_search_env","text":"build_search_env(config_path; cache_path=nothing)\n\nCreates a search environment using the information provided by the configuration file config_path.\n\n\n\n\n\n","category":"method"},{"location":"api/#Garamond.build_search_env-Tuple{Any}","page":"API Reference","title":"Garamond.build_search_env","text":"build_search_env(env_config; cache_path=nothing)\n\nCreates a search environment using the information provided by the environment configuration env_config. A cache filepath can be specified by cache_path in which case the function will attempt to load it first.\n\n\n\n\n\n","category":"method"},{"location":"api/#Garamond.parse_configuration-Tuple{AbstractString}","page":"API Reference","title":"Garamond.parse_configuration","text":"parse_configuration(filename)\n\nParses a data configuration file (JSON format) and returns a NamedTuple that acts as a search environment configuration.\n\n• Search environment options reference     data_loader::Function             # 0 argument function that when called loads the data i.e. dbdata     data_sampler::Function            # function that takes as input raw data and outputs a dbdata row     id_key::Symbol                    # the name of the primary integer key in dbdata     vectors_eltype::Type              # the type of the vectors, scores etc. has to be <:AbstractFloat     searcher_configs::Vector{NamedTuple}  # vector of searcher configs (see reference below)     embedder_configs::Vector{NamedTuple}  # vector of embedder configs (see reference below)     config_path::String               # the path to the config\n\n• Embedder config fields reference     id::String     description::String     language::String                  # the embedder-level language     stem_words::Bool                  # whether to stem words     ngram_complexity::Int             # ngram complexity (i.e. max number of tokes for an n-gram)     vectors::Symbol                   # wordvectors calculation/source i.e. :count, :tf, :tfidf, :bm25, :word2vec, :glove, :conceptnet, :compressed     vectors_transform::Symbol         # transform to apply to the vectors i.e. :lsa, :rp, :none     vectors_dimension::Int            # desired dimensionality after transform (ignored for word2vec approaches)     embeddings_path::Union{Nothing, String}  # path to the embeddings file     embeddings_kind::Symbol           # Type of the embedding file for Word2Vec, GloVe i.e. :text, :binary     doc2vec_method::Symbol            # How to arrive at a single embedding from multiple i.e. :boe, :sif etc.     glove_vocabulary::Union{Nothing, String}  # Path to a GloVe-generated vocabulary file (only for binary embeddings)     oov_policy::Symbol                # what to do with non-embeddable documents i.e. :none, :largevector     `embedderkwarguments::Dict{Symbol, Any}# explicit specification of embedder keyword argumentsembeddablefields::Union{Nothing, Vector{Symbol}}# which fields to use for training the embeddertextstripflags::UInt32# How to strip text data before indexingsifalpha::Float# smooth inverse frequency α parameter (for 'sif' doc2vec method only)borepdimension::Int# output dimension for BOREP embedderboreppoolingfunction::Symbol# pooling function for the BOREP embedderdiscngram::Int`                   # DisC embedder ngram parameter\n\n• Searcher config fields reference     id::String                        # searcher id     id_aggregation::String            # aggregation id     description::String               # description of the searcher     enabled::Vector{Bool}             # whether to use the searcher in search or not     search_index::Symbol              # type of the search index i.e. :naive, :kdtree, :hnsw     search_index_arguments::Vector{Any}     search_index_kwarguments::Dict{Symbol, Any}     indexable_fields::Union{Nothing, Vector{Symbol}}  # which fields to index     data_embedder::String             # id of the data/document embedder     input_embedder::String            # id of the input/query embedder     heuristic::Union{Nothing, Symbol} # search heuristic for suggesting mispelled words (nothing means no recommendations)     score_alpha::Float                # score alpha (parameter for the scoring function)     score_weight::Float               # weight of scores of searcher (used in result aggregation)\n\n\n\n\n\n","category":"method"},{"location":"api/#Garamond.rest_server-Tuple{Integer,Integer,Base.GenericCondition{Base.AlwaysLockedST}}","page":"API Reference","title":"Garamond.rest_server","text":"rest_server(port::Integer, io_port::Integer, search_server_ready::Condition [;ipaddr::String])\n\nStarts a bi-directional HTTP REST server at address ipaddr::String (defaults to \"0.0.0.0\" i.e. all ip's) that uses the TCP port port and communicates with the search server through the TCP port io_port. The server is started once the condition search_server_ready is triggered.\n\n\n\n\n\n","category":"method"},{"location":"api/#Garamond.search-Union{Tuple{I}, Tuple{E}, Tuple{T}, Tuple{Searcher{T,E,I},Any}} where I<:AbstractIndex where E where T<:AbstractFloat","page":"API Reference","title":"Garamond.search","text":"search(srcher, query [;kwargs])\n\nSearches for query (i.e. key terms) in srcher, and returns information regarding the the documents that match best the query. The function returns an object of type SearchResult.\n\nArguments\n\nsrcher::Searcher is the searcher\nquery the query, can be either a String or Vector{String}\n\nKeyword arguments\n\nsearch_method::Symbol controls the type of matching: :exact  uses exact matches while :regex consideres the needle a regular expression\nmax_matches::Int is the maximum number of search results to return\nmax_suggestions::Int is the maximum number of suggestions to return for  each missing needle\n\n\n\n\n\n","category":"method"},{"location":"api/#Garamond.search-Union{Tuple{T}, Tuple{Array{#s469,1} where #s469<:AbstractSearcher{T},Any}} where T<:AbstractFloat","page":"API Reference","title":"Garamond.search","text":"search(srchers, query [;kwargs])\n\nSearches for query (i.e. key terms) in multiple searches and returns information regarding the documents that match best the query. The function returns the search results in the form of a Vector{SearchResult}.\n\nArguments\n\nsrchers::Vector{Searcher} is the searchers vector\nquery the query, can be either a String or Vector{String}\n\nKeyword arguments\n\nsearch_method::Symbol controls the type of matching: :exact  uses exact matches while :regex consideres the needle a regular expression\nmax_matches::Int is the maximum number of search results to return\nmax_suggestions::Int is the maximum number of suggestions to return for  each missing needle\ncustom_weights::Dict{Symbol, Float} are custom weights for each  searcher's results used in result aggregation\n\n\n\n\n\n","category":"method"},{"location":"api/#Garamond.search_server-Tuple{Any,Any,Any}","page":"API Reference","title":"Garamond.search_server","text":"search_server(data_config_path, io_port, search_server_ready; cache_path=nothing)\n\nSearch server for Garamond. It is a finite-state-machine that when called, creates the searchers i.e. search objects using the data_config_path and the proceeds to looping continuously in order to asynchronously handle outside requests.\n\nAfter the searchers are loaded, the search server sends a notification using search_server_ready to any listening I/O servers.\n\n\n\n\n\n","category":"method"},{"location":"api/#Garamond.unix_socket_server-Tuple{AbstractString,Integer,Base.GenericCondition{Base.AlwaysLockedST}}","page":"API Reference","title":"Garamond.unix_socket_server","text":"unix_socket_server(socket::AbstractString, io_port::Integer, start::Condition)\n\nStarts a bi-directional unix socket server that uses a UNIX-socket socket and communicates with the search server through the TCP port io_port. The server is started once the condition start is triggered.\n\n\n\n\n\n","category":"method"},{"location":"api/#Garamond.web_socket_server-Tuple{UInt16,Integer,Base.GenericCondition{Base.AlwaysLockedST}}","page":"API Reference","title":"Garamond.web_socket_server","text":"web_socket_server(port::UInt16, io_port::Integer, start::Condition [; ipaddr::String])\n\nStarts a bi-directional web socket server that uses a WEB-socket at address ipaddr::String (defaults to \"127.0.0.1\") and port port and communicates with the search server through the TCP port io_port. The server is started once the condition start is triggered.\n\n\n\n\n\n","category":"method"},{"location":"api/#Garamond.DTVModel","page":"API Reference","title":"Garamond.DTVModel","text":"Constant that represents document term vector (DTV) models used in text embedding.\n\n\n\n\n\n","category":"constant"},{"location":"api/#Garamond.ENVOP_REQUEST","page":"API Reference","title":"Garamond.ENVOP_REQUEST","text":"Request corresponding to an environment operation command.\n\n\n\n\n\n","category":"constant"},{"location":"api/#Garamond.ERRORED_REQUEST","page":"API Reference","title":"Garamond.ERRORED_REQUEST","text":"Request corresponding to an error i.e. in parsing.\n\n\n\n\n\n","category":"constant"},{"location":"api/#Garamond.EmbeddingsLibrary","page":"API Reference","title":"Garamond.EmbeddingsLibrary","text":"Constant that represents embeddings libraries used in text embedding.\n\n\n\n\n\n","category":"constant"},{"location":"api/#Garamond.KILL_REQUEST","page":"API Reference","title":"Garamond.KILL_REQUEST","text":"Request corresponding to a kill server command.\n\n\n\n\n\n","category":"constant"},{"location":"api/#Garamond.READCONFIGS_REQUEST","page":"API Reference","title":"Garamond.READCONFIGS_REQUEST","text":"Request corresponding to a searcher read configuration command.\n\n\n\n\n\n","category":"constant"},{"location":"api/#Garamond.RESPONSE_TERMINATOR","page":"API Reference","title":"Garamond.RESPONSE_TERMINATOR","text":"Standard response terminator. It is used in the client-server communication mark the end of sent and received messages.\n\n\n\n\n\n","category":"constant"},{"location":"api/#Garamond.UNINITIALIZED_REQUEST","page":"API Reference","title":"Garamond.UNINITIALIZED_REQUEST","text":"Default request.\n\n\n\n\n\n","category":"constant"},{"location":"api/#Garamond.BOEEmbedder","page":"API Reference","title":"Garamond.BOEEmbedder","text":"Bag-of-embeddings (BOE) structure for document embedding using word vectors.\n\n\n\n\n\n","category":"type"},{"location":"api/#Garamond.BOREPEmbedder","page":"API Reference","title":"Garamond.BOREPEmbedder","text":"Bag-of-random-embedding-projections (BOREP) structure for document embedding using word vectors.\n\nReferences\n\nWieting, Kiela ICLR 2019, \"No training required: Exploring random encoders  for sentence classification\"\n\n\n\n\n\n","category":"type"},{"location":"api/#Garamond.CPMeanEmbedder","page":"API Reference","title":"Garamond.CPMeanEmbedder","text":"Concatenated-power-mean-embeddings (CPMean) structure for document embedding using word vectors.\n\nReferences\n\nRücklé et al. 2018 \"Concatenated power mean word embeddings  as universal cross-lingual sentence representations\"\n\n\n\n\n\n","category":"type"},{"location":"api/#Garamond.DTVEmbedder","page":"API Reference","title":"Garamond.DTVEmbedder","text":"Structure for document embedding using DTV's.\n\n\n\n\n\n","category":"type"},{"location":"api/#Garamond.DisCEmbedder","page":"API Reference","title":"Garamond.DisCEmbedder","text":"Distributed Co-occurence (DisC) structure for document embedding using word vectors.\n\nReferences\n\nArora et al. ICLR 2018 \"A compressed sensing  view of unsupervised text embeddings, bag-on-n-grams  and LSTMs\"\n\n\n\n\n\n","category":"type"},{"location":"api/#Garamond.InternalRequest","page":"API Reference","title":"Garamond.InternalRequest","text":"Request object for the internal server of the engine.\n\n\n\n\n\n","category":"type"},{"location":"api/#Garamond.SIFEmbedder","page":"API Reference","title":"Garamond.SIFEmbedder","text":"Smooth inverse frequency (SIF) structure for document embedding using word vectors.\n\nReferences\n\nArora et al. ICLR 2017, \"A simple but tough-to-beat baseline for sentence embeddings\"\n\n\n\n\n\n","category":"type"},{"location":"api/#Base.deleteat!-Tuple{SearchEnv,Any}","page":"API Reference","title":"Base.deleteat!","text":"deleteat!(env::SearchEnv, pos)\n\nDeletes from a search environment the db and index elements with linear indices found in pos.\n\n\n\n\n\n","category":"method"},{"location":"api/#Base.length-Tuple{AbstractIndex}","page":"API Reference","title":"Base.length","text":"length(index)\n\nReturns the number of points indexed in index.\n\n\n\n\n\n","category":"method"},{"location":"api/#Base.parse-Union{Tuple{T}, Tuple{Type{T},AbstractString}} where T<:Garamond.InternalRequest","page":"API Reference","title":"Base.parse","text":"parse(::Type{InternalRequest}, request::AbstractString)\n\nParses an outside request received from a client into an InternalRequest usable by the search server.\n\n\n\n\n\n","category":"method"},{"location":"api/#Base.pop!-Tuple{SearchEnv}","page":"API Reference","title":"Base.pop!","text":"pop!(env::SearchEnv)\n\nPops last point from a search environment. Returns last db row and associated indexed vector.\n\n\n\n\n\n","category":"method"},{"location":"api/#Base.popfirst!-Tuple{SearchEnv}","page":"API Reference","title":"Base.popfirst!","text":"popfirst!(env::SearchEnv)\n\nPops first point from a search environment. Returns first db row and associated indexed vector.\n\n\n\n\n\n","category":"method"},{"location":"api/#Base.push!-Tuple{SearchEnv,Any}","page":"API Reference","title":"Base.push!","text":"push!(env::SearchEnv, rawdata)\n\nPushes to a search environment i.e. to the db and all indexes.\n\n\n\n\n\n","category":"method"},{"location":"api/#Base.pushfirst!-Tuple{SearchEnv,Any}","page":"API Reference","title":"Base.pushfirst!","text":"pushfirst!(env::SearchEnv, rawdata)\n\nPushes to the first position to a search environment i.e. to the db and all indexes.\n\n\n\n\n\n","category":"method"},{"location":"api/#Garamond.__document2vec-Union{Tuple{S}, Tuple{T}, Tuple{Garamond.WordVectorsEmbedder{T,S},Array{String,1}}} where S where T","page":"API Reference","title":"Garamond.__document2vec","text":"document2vec(embedder, document)\n\nWord-embeddings approach to document embedding. It embeds documents using word embeddings libraries and some algorithm for combining these (depending on the type of embedder).\n\nArguments\n\nembedder::WordVectorsEmbedder is the embedder\ndocument::Vector{String} the document to be embedded,  where each vector element corresponds to a sentence\n\n\n\n\n\n","category":"method"},{"location":"api/#Garamond.aggregate!-Union{Tuple{S}, Tuple{T}, Tuple{Array{S,1},Array{String,1}}} where S<:SearchResult{T} where T","page":"API Reference","title":"Garamond.aggregate!","text":"Aggregates search results from several searchers based on their aggregation_id i.e. results from searchers with identical aggregation id's are merged together into a new search result that replaces the individual searcher ones.\n\n\n\n\n\n","category":"method"},{"location":"api/#Garamond.build_data_env-Tuple{SearchEnv}","page":"API Reference","title":"Garamond.build_data_env","text":"build_data_env(env::SearchEnv)\n\nStrips searchers from env.\n\n\n\n\n\n","category":"method"},{"location":"api/#Garamond.build_logger","page":"API Reference","title":"Garamond.build_logger","text":"build_logger(logging_stream, log_level)\n\nBuilds a logger using the stream logging_streamand log_level provided.\n\nArguments\n\nlogging_stream::String is the output stream and can take the values:\n\n\"null\" logs to /dev/null, \"stdout\" (default) logs to standard output,   \"/path/to/existing/file\" logs to an existing file and   \"/path/to/non-existing/file\" creates the log file. If no valid option   is provided, the default stream is the standard output.\n\nlog_level::String is the log level can take the values \"debug\",\n\n\"info\", \"error\" and defaults to \"info\" if no valid option is provided.\n\n\n\n\n\n","category":"function"},{"location":"api/#Garamond.build_response-Tuple{Any,Any,Any}","page":"API Reference","title":"Garamond.build_response","text":"build_response(dbdata, request, results, [; kwargs...])\n\nBuilds a response for an engine client using the data, request and results.\n\n\n\n\n\n","category":"method"},{"location":"api/#Garamond.build_result_from_ids-NTuple{4,Any}","page":"API Reference","title":"Garamond.build_result_from_ids","text":"Constructs a search result from a list of data ids.\n\n\n\n\n\n","category":"method"},{"location":"api/#Garamond.build_searcher-Tuple{Any,Any,Any}","page":"API Reference","title":"Garamond.build_searcher","text":"build_searcher(dbdata, config)\n\nCreates a Searcher from a searcher configuration.\n\n\n\n\n\n","category":"method"},{"location":"api/#Garamond.chop_to_length-Tuple{Any,Any}","page":"API Reference","title":"Garamond.chop_to_length","text":"Post-processes a string to fit a certain length, adding … if necessary at the end of its choped represenation.\n\n\n\n\n\n","category":"method"},{"location":"api/#Garamond.densify-Tuple{AbstractArray{T,2} where T}","page":"API Reference","title":"Garamond.densify","text":"densify(array)\n\nTransforms sparse arrays into dense ones.\n\n\n\n\n\n","category":"method"},{"location":"api/#Garamond.detect_language-Tuple{AbstractString}","page":"API Reference","title":"Garamond.detect_language","text":"detect_language(text [; default=DEFAULT_LANGUAGE])\n\nDetects the language of a piece of text. Returns a language of type Languages.Language. If the text is empty of the confidence is low, return the default language.\n\n\n\n\n\n","category":"method"},{"location":"api/#Garamond.document2vec-Tuple{AbstractEmbedder,Array{AbstractString,1}}","page":"API Reference","title":"Garamond.document2vec","text":"document2vec(embedder, document [;isregex=false])\n\nEmbeds documents. The document representation is conceptually a vector of sentences, the output is always a vector of floating point numbers.\n\nArguments\n\nembedder::AbstractEmbedder is the embedder\ndocument::Vector{AbstractString} the document to be embedded,  where each vector element corresponds to a sentence\n\nKeyword arguments\n\nisregex::Bool a false value (default) specifies that the  document tokens are to be matched exactly while a true value  specifies that the tokens are to be matched partially  (for DTV-based document embedding only)\n\n\n\n\n\n","category":"method"},{"location":"api/#Garamond.env_operator-Tuple{Any,Any}","page":"API Reference","title":"Garamond.env_operator","text":"env_operator(env, channels)\n\nSaves/Loads/Updates the search environment env. Communication with the search server i.e. getting the command and its arguments and sending back a new environment is done via channels.\n\n\n\n\n\n","category":"method"},{"location":"api/#Garamond.garamond_log_formatter-NTuple{6,Any}","page":"API Reference","title":"Garamond.garamond_log_formatter","text":"garamond_log_formatter(level, _module, group, id, file, line)\n\nGaramond -specific log message formatter. Takes a fixed set of input arguments and returns the color, prefix and suffix for the log message.\n\n\n\n\n\n","category":"method"},{"location":"api/#Garamond.missing_needles","page":"API Reference","title":"Garamond.missing_needles","text":"Returns found and missing needles using an embedder\n\n\n\n\n\n","category":"function"},{"location":"api/#Garamond.noop_ranker-Tuple{Any,Any,Vararg{Any,N} where N}","page":"API Reference","title":"Garamond.noop_ranker","text":"Noop ranker, does not rank, returns the first input argument unchanged.\n\n\n\n\n\n","category":"method"},{"location":"api/#Garamond.printable_version-Tuple{}","page":"API Reference","title":"Garamond.printable_version","text":"printable_version()\n\nReturns a pretty version string that includes the git commit and date.\n\n\n\n\n\n","category":"method"},{"location":"api/#Garamond.read_configuration_to_json-Tuple{Any}","page":"API Reference","title":"Garamond.read_configuration_to_json","text":"read_configuration_to_json(env)\n\nReturns a JSON dictionary with the full configuration of the search environment.\n\n\n\n\n\n","category":"method"},{"location":"api/#Garamond.respond-NTuple{4,Any}","page":"API Reference","title":"Garamond.respond","text":"respond(env, socket, counter, channels)\n\nResponds to search server requests received on socket using the search data from searchers. The requests are counted through the variable counter.\n\n\n\n\n\n","category":"method"},{"location":"api/#Garamond.sentences2vec-Tuple{AbstractEmbedder,Array{Array{AbstractFloat,2},1}}","page":"API Reference","title":"Garamond.sentences2vec","text":"sentences2vec(embedder, document_embedding, embedded_words [;dim=0])\n\nReturns a matrix of sentence embeddings from a vector of matrices containing individual sentence word embeddings. Used mostly for word-vectors based embedders.\n\nArguments\n\nembedder::AbstractEmbedder is the embedder\ndocument_embedding::Vector{Matrix{AbstractFloat}} are the document's  word embeddings, where each element of the vector represents the  embedding of a sentence (whith the matrix columns individual word  embeddings)\n\nKeyword arguments\n\ndim::Int is the dimension of the word embeddings i.e. number of  components in the word vector (default 0)\nembedded_words::Vector{Vector{AbstractString}} are the words in  each sentence the were embedded (their order corresponds to the  order of the matrix columns in document_embedding\n\n\n\n\n\n","category":"method"},{"location":"api/#Garamond.squash-Union{Tuple{Array{T,2}}, Tuple{T}} where T<:AbstractFloat","page":"API Reference","title":"Garamond.squash","text":"squash(m)\n\nFunction that creates a single mean vector from a matrix m and performs some normalization operations as well.\n\n\n\n\n\n","category":"method"},{"location":"api/#Garamond.squash-Union{Tuple{T}, Tuple{Array{Array{T,1},1},Int64}} where T<:AbstractFloat","page":"API Reference","title":"Garamond.squash","text":"squash(vv, m)\n\nFunction that creates a single mean vector from a vector of vectors vv where each vector has a length m and performs some normalization operations as well.\n\n\n\n\n\n","category":"method"},{"location":"api/#Garamond.suggestion_search!-Union{Tuple{T}, Tuple{S}, Tuple{DataStructures.MultiDict{String,Tuple{T,String}},BKTrees.BKTree{String},Array{S,1}}} where T<:AbstractFloat where S<:AbstractString","page":"API Reference","title":"Garamond.suggestion_search!","text":"suggestion_search!(suggestions, search_tree, needles [;max_suggestions=1])\n\nSearches in the search tree for partial matches for each of  the needles.\n\n\n\n\n\n","category":"method"},{"location":"api/#Garamond.summarize-Union{Tuple{Array{S,1}}, Tuple{S}} where S<:AbstractString","page":"API Reference","title":"Garamond.summarize","text":"summarize(sentences [;ns=1, flags=DEFAULT_SUMMARIZATION_STRIP_FLAGS])\n\nBuild a summary of the text's sentences. The resulting summary will be a ns sentence document; each sentence is pre-procesed using the flags option.\n\n\n\n\n\n","category":"method"},{"location":"api/#Garamond.version-Tuple{}","page":"API Reference","title":"Garamond.version","text":"version()\n\nReturns the current Garamond version using the Project.toml and git. If the Project.toml, git are not available, the version defaults to an empty string.\n\n\n\n\n\n","category":"method"},{"location":"api/#Garamond.word_embeddings-Union{Tuple{D}, Tuple{U}, Tuple{Q}, Tuple{S2}, Tuple{H}, Tuple{T}, Tuple{S1}, Tuple{Union{EmbeddingsAnalysis.CompressedWordVectors{Q,U,D,T,S1,H}, Glowe.WordVectors{S1,T,H}, Word2Vec.WordVectors{S1,T,H}},Array{S2,1}}} where D<:Distances.PreMetric where U<:Unsigned where Q<:QuantizedArrays.AbstractQuantization where S2<:AbstractString where H<:Integer where T<:Real where S1<:AbstractString","page":"API Reference","title":"Garamond.word_embeddings","text":"word_embeddings(word_vectors, document_tokens [;kwargs])\n\nReturns a matrix corresponding to the word embeddings of document_tokens as well as the indices of missing i.e. not-embedded tokens.\n\nArguments\n\nword_vectors::EmbeddingsLibrary wordvectors object; can be  a Word2Vec.WordVectors, Glowe.WordVectors or ConceptnetNumberbatch.ConceptNet\ndocument_tokens::Vector{String} the words to be embedded,  where each vector element corresponds to a word\n\nKeyword arguments\n\nkeep_size::Bool a false value discards vectors for words not found  while a true value (default) places a zero vector in the embeddings  matrix\nprint_matched_words::Bool if true, the words that were and that were  not embedded are printed (default false)\nkwargs... the rest of the keyword arguments are ConceptNet specific  and can be found by inspecting the help of ConceptnetNumberbatch.embed_document\n\n\n\n\n\n","category":"method"},{"location":"api/#HNSW.knn_search-Tuple{AbstractIndex,AbstractArray{T,1} where T,Integer,AbstractArray{T,1} where T}","page":"API Reference","title":"HNSW.knn_search","text":"knn_search(index, point, k, keep)\n\nSearches for the k nearest neighbors of point in data contained in the index. The index may vary from a simple wrapper inside a matrix to more complex structures such as k-d trees, etc. Only neighbors present in keep are returned.\n\n\n\n\n\n","category":"method"},{"location":"remarks/#Remarks-1","page":"Remarks","title":"Remarks","text":"","category":"section"},{"location":"remarks/#Multi-threading-1","page":"Remarks","title":"Multi-threading","text":"","category":"section"},{"location":"remarks/#","page":"Remarks","title":"Remarks","text":"If one chooses to use multi-threading i.e. through the Threads.@threads, Threads.@spawn  macros for example, export the following: OPENBLAS_NUM_THREADS=1 and JULIA_NUM_THREADS=<n> where n is the number of threads desired.","category":"page"},{"location":"remarks/#Unix-socket-tips-and-tricks-1","page":"Remarks","title":"Unix socket tips and tricks","text":"","category":"section"},{"location":"remarks/#","page":"Remarks","title":"Remarks","text":"The examples below assume the existence of a Unix socket at the location /tmp/<unix_socket> (the socket name is not specified).","category":"page"},{"location":"remarks/#","page":"Remarks","title":"Remarks","text":"To redirect a TCP socket to a UNIX socket: socat TCP-LISTEN:<tcp_port>,reuseaddr,fork UNIX-CLIENT:/tmp/<unix_socket> or socat TCP-LISTEN:<tcp_port>,bind=127.0.0.1,reuseaddr,fork,su=nobody,range=127.0.0.0/8 UNIX-CLIENT:/tmp/<unix_socket>\nTo send a query to a Garamond server (no reply, for debugging purposes): echo 'find me a needle' | socat - UNIX-CONNECT:/tmp/garamond/sockets/<unix_socket>\nFor interactive send/receive, socat UNIX-CONNECT:/tmp/garamond/sockets/<unix_socket> STDOUT","category":"page"},{"location":"getting_started/#","page":"Getting started","title":"Getting started","text":"warning: Work in progress!\nThis section currently under construction and is incomplete.","category":"page"},{"location":"getting_started/#Getting-started-1","page":"Getting started","title":"Getting started","text":"","category":"section"},{"location":"getting_started/#","page":"Getting started","title":"Getting started","text":"The engine uses a pluggable approach in which data loaders, parsers, recommenders and rankers can be compiled in the engine at runtime. The following usage examples use functionality already provided by the engine. Although by no means exhaustive, it is meant to provide a starting point for exploring the functionality and features of the engine.","category":"page"},{"location":"getting_started/#","page":"Getting started","title":"Getting started","text":"tip: Glossary\nThroughout the documentation, certain terms will appear when refering to the internals of the engine. Some of the most frequent ones are:configuration may refer to:\nsearcher configuration, a SearcherConfig object which holds the configuration options for individual searchers.\nenvironment configuration, a NamedTuple that contains searcher configurations as well as other parameters.\ndata configuration file, a JSON file which is parsed to generate an environment configuration.\nsearch environment a SearchEnv object that holds the data and searchers among other. It fully describes the state of the engine.\nsearcher, a Searcher object that is used to perform the actual search. It holds the indexed documents in some vectorial representation.\nindex - the data structure holding the vector representation of the documents.\nrequest - may refer to:\na request form an outside system to the engine i.e. HTTP request.\nthe internal representation of a request, of type InternalRequest.","category":"page"},{"location":"getting_started/#Engine-configuration-1","page":"Getting started","title":"Engine configuration","text":"","category":"section"},{"location":"getting_started/#","page":"Getting started","title":"Getting started","text":"The main configuration of the engine pertains to data loading, parsing and indexing. Its role is to provide all necessary details as well as the internal architecture of the engine. The recommended way for configuring the engine is to create a JSON file with all necessary options. Alternatively, the result of parsing the configuration file i.e. the configuration object can be created explicitly however it is, at least at this point, a cumbersome operation.","category":"page"},{"location":"getting_started/#","page":"Getting started","title":"Getting started","text":"using Logging, JSON, JuliaDB, Garamond\ninclude(joinpath(@__DIR__, \"..\", \"..\", \"test\", \"configs\", \"configgenerator.jl\"));\ncfg = mktemp() do path, io  # write and parse config file on-the-fly\n    write(io, generate_sample_config_1())\n    flush(io)\n    parse_configuration(path)\nend","category":"page"},{"location":"getting_started/#","page":"Getting started","title":"Getting started","text":"The configuration contains the data loader (a closure that only needs to be called with no argument to load the data), the path of the configuration file, the primary id key of the data (which needs to be a JuliaDB data type) and a list of configuration objects for the individual searchers of the engine.","category":"page"},{"location":"getting_started/#","page":"Getting started","title":"Getting started","text":"for field in fieldnames(typeof(cfg))\n    println(\"$field=$(getfield(cfg, field))\")\nend","category":"page"},{"location":"getting_started/#The-search-environment-1","page":"Getting started","title":"The search environment","text":"","category":"section"},{"location":"getting_started/#","page":"Getting started","title":"Getting started","text":"Building the search environment out of the configuration is straightforward. The environment holds the in-memory data in the form of an IndexedTable or NDSparse object, the searchers as well as other information such as primary db key and configuration paths. ","category":"page"},{"location":"getting_started/#","page":"Getting started","title":"Getting started","text":"env = build_search_env(cfg)","category":"page"},{"location":"getting_started/#Engine-operations-1","page":"Getting started","title":"Engine operations","text":"","category":"section"},{"location":"getting_started/#","page":"Getting started","title":"Getting started","text":"The internal API is designed to be straightforward and uniform in the way it is called. First, one has to build a request which fully describes the operation to be performed and subsequently, call the operation desired. For example, to perform a search, one request would be:","category":"page"},{"location":"getting_started/#","page":"Getting started","title":"Getting started","text":"request = Garamond.InternalRequest(operation=:search,\n                                   query=\"Q\",\n                                   search_method=:exact,\n                                   max_matches=10,\n                                   response_size=5,\n                                   max_suggestions=0,\n                                   return_fields=[:id, :RandString, :StringField],\n                                   input_parser=:noop_input_parser,\n                                   ranker=:noop_ranker)","category":"page"},{"location":"getting_started/#","page":"Getting started","title":"Getting started","text":"with searching done by","category":"page"},{"location":"getting_started/#","page":"Getting started","title":"Getting started","text":"search_results = search(env, request)","category":"page"},{"location":"getting_started/#","page":"Getting started","title":"Getting started","text":"Ranking the results using the ranker specified in the request is done with:","category":"page"},{"location":"getting_started/#","page":"Getting started","title":"Getting started","text":"ranked = rank(env, request, search_results)","category":"page"},{"location":"getting_started/#Results-and-responses-1","page":"Getting started","title":"Results and responses","text":"","category":"section"},{"location":"getting_started/#","page":"Getting started","title":"Getting started","text":"Once results are available, these can be printed","category":"page"},{"location":"getting_started/#","page":"Getting started","title":"Getting started","text":"print_search_results(env.dbdata, ranked; id_key=:id, fields=[:id, :RandString])","category":"page"},{"location":"getting_started/#","page":"Getting started","title":"Getting started","text":"or a JSON response created are sent elsewhere","category":"page"},{"location":"getting_started/#","page":"Getting started","title":"Getting started","text":"response = Garamond.build_response(env.dbdata, request, ranked, id_key=env.id_key)","category":"page"},{"location":"getting_started/#","page":"Getting started","title":"Getting started","text":"To verify the response, it can be parsed and displayed:","category":"page"},{"location":"getting_started/#","page":"Getting started","title":"Getting started","text":"parsed_response = JSON.parse(response)\nparsed_response[\"results\"][collect(keys(parsed_response[\"results\"]))[1]]","category":"page"},{"location":"clientserver/#Search-server,-clients-and-REST-APIs-1","page":"Client/Server","title":"Search server, clients and REST APIs","text":"","category":"section"},{"location":"clientserver/#","page":"Client/Server","title":"Client/Server","text":"Garamond is designed as a client-server architecture in which the server receives requests, performs the search, recommendation or ranking operations and returns a response containing the search results back to the client.","category":"page"},{"location":"clientserver/#","page":"Client/Server","title":"Client/Server","text":"note: Note\nThe clients do not depend on the Garamond package and are very lightweight.\nThe preferred way of communicating with the server is through the REST API using HTTP clients such as curl, etc.","category":"page"},{"location":"clientserver/#","page":"Client/Server","title":"Client/Server","text":"In the root directory of the package the search server utility and two thin clients can be found:","category":"page"},{"location":"clientserver/#","page":"Client/Server","title":"Client/Server","text":"gars - starts the search server. The operations performed by the search engine server at this point are indexing data according to a given configuration and serving requests coming from connections to sockets or HTTP ports.\ngarc - command line client supporting Unix socket communication. Through it, a single search can be performed and many of the search request parameters can be specified. It supports printing search results in a human-readable way.\ngarw - web client supporting Web socket communication (experimental and feature limited). The basic principle is that it starts a HTTP server which serves a page at a given HTTP port. If the web page is not specified, a default one is generated internally and served. The user connects with a web browser of choice at the local address and port (i.e. 127.0.0.1) and performs the search queries from the page. It naturally supports multiple queries however, the parameters of the search cannot be changed.","category":"page"},{"location":"clientserver/#Server-1","page":"Client/Server","title":"Server","text":"","category":"section"},{"location":"clientserver/#","page":"Client/Server","title":"Client/Server","text":"The search server listens on an ip and/or socket for incoming requests. Once one is received, it is processed and the response sent back to same socket. Looking at the gars command line help","category":"page"},{"location":"clientserver/#","page":"Client/Server","title":"Client/Server","text":"$ ./gars --help\nActivating environment at `~/projects/Garamond.jl/Project.toml`\n[ Info: ~ GARAMOND ~ v\"0.2.0\" commit: 55dd103 (2019-10-23)\nusage: gars [-d DATA-CONFIG] [--log-level LOG-LEVEL] [-l LOG]\n            [-u UNIX-SOCKET] [-w WEB-SOCKET-PORT]\n            [--web-socket-ip WEB-SOCKET-IP] [-p HTTP-PORT]\n            [--http-ip HTTP-IP] [-i SEARCH-SERVER-PORT] [-h]\n\noptional arguments:\n  -d, --data-config DATA-CONFIG\n                        data configuration file\n  --log-level LOG-LEVEL\n                        logging level (default: \"info\")\n  -l, --log LOG         logging stream (default: \"stdout\")\n  -u, --unix-socket UNIX-SOCKET\n                        UNIX socket for data communication\n  -w, --web-socket-port WEB-SOCKET-PORT\n                        WEB socket data communication port (type:\n                        UInt16)\n  --web-socket-ip WEB-SOCKET-IP\n                        WEB socket data communication IP (default:\n                        \"127.0.0.1\")\n  -p, --http-port HTTP-PORT\n                        HTTP port for REST services (type: Int64)\n  --http-ip HTTP-IP     HTTP IP for REST services (default: \"0.0.0.0\")\n  -i, --search-server-port SEARCH-SERVER-PORT\n                        Internal TCP port for the search server (type:\n                        Int64, default: 9000)\n  -h, --help            show this help message and exit","category":"page"},{"location":"clientserver/#","page":"Client/Server","title":"Client/Server","text":"starting the server becomes quite straightforward.","category":"page"},{"location":"clientserver/#","page":"Client/Server","title":"Client/Server","text":"For example, to start the server listening to a web socket at port 9100 and to a UNIX socket at /tmp/some/socket:","category":"page"},{"location":"clientserver/#","page":"Client/Server","title":"Client/Server","text":"$ ./gars -d ./search_data_config.json -u /tmp/some/socket -w 9100 --log-level info\nActivating environment at `~/projects/Garamond.jl/Project.toml`\n[ Info: • Loaders (custom): sample_loader.jl\n[ Info: ~ GARAMOND ~ v\"0.2.0\" commit: 55dd103 (2019-10-23)\n[ [2019-10-19 11:15:55][INFO][sample_loader.jl:179] Sample data loader: read 23269 records from /opt/data/sample\n[ [2019-10-19 11:16:11][INFO][search.jl:28] Searchers loaded. Notifying I/O servers...\n[ [2019-10-19 11:16:11][INFO][search.jl:34] SEARCH server online @127.0.0.1:9000...\n[ [2019-10-19 11:16:11][INFO][unixsocket.jl:30] UNIX-Socket server online @/tmp/some/socket...\n[ [2019-10-19 11:16:11][INFO][websocket.jl:21] Web-Socket server online @127.0.0.1:9100...","category":"page"},{"location":"clientserver/#","page":"Client/Server","title":"Client/Server","text":"Through the -d switch, a data configuration is specified for use. It holds all the necessary information related to data loading, indexing, searching, recommending etc.","category":"page"},{"location":"clientserver/#Clients-1","page":"Client/Server","title":"Clients","text":"","category":"section"},{"location":"clientserver/#garc:-Commandline-client-1","page":"Client/Server","title":"garc: Commandline client","text":"","category":"section"},{"location":"clientserver/#","page":"Client/Server","title":"Client/Server","text":"The commandline client garc sends the request to an open Unix socket and waits the search response on the same socket. It is worthwhile checking the available commandline options:","category":"page"},{"location":"clientserver/#","page":"Client/Server","title":"Client/Server","text":"$ ./garc --help\nusage: garc [--log-level LOG-LEVEL] [-u UNIX-SOCKET]\n            [--return-fields [RETURN-FIELDS...]] [--pretty]\n            [--max-matches MAX-MATCHES]\n            [--response-size RESPONSE-SIZE]\n            [--search-method SEARCH-METHOD]\n            [--max-suggestions MAX-SUGGESTIONS] [--id-key ID-KEY] [-k]\n            [--env-operation ENV-OPERATION ENV-OPERATION]\n            [--ranker RANKER] [--input-parser INPUT-PARSER] [-h]\n            [query]\n\npositional arguments:\n  query                 the search query (default: \"\")\n\noptional arguments:\n  --log-level LOG-LEVEL\n                        logging level (default: \"warn\")\n  -u, --unix-socket UNIX-SOCKET\n                        UNIX socket for data communication (default:\n                        \"\")\n  --return-fields [RETURN-FIELDS...]\n                        List of fields to return (ignores wrong names)\n  --pretty              output is a pretty print of the results\n  --max-matches MAX-MATCHES\n                        maximum number of results for internal\n                        neighbor searches (type: Int64, default: 10)\n  --response-size RESPONSE-SIZE\n                        maximum number of results to return (type:\n                        Int64, default: 10)\n  --search-method SEARCH-METHOD\n                        type of match done during search (type:\n                        Symbol, default: :exact)\n  --max-suggestions MAX-SUGGESTIONS\n                        How many suggestions to return for each\n                        mismatched query term (type: Int64, default:\n                        0)\n  --id-key ID-KEY       The linear ID key (default:\n                        \"garamond_linear_id\")\n  -k, --kill            Kill the search engine server\n  --env-operation ENV-OPERATION ENV-OPERATION\n                        Environment operation\n  --ranker RANKER       The ranker to use; avalilable: noop_ranker\n                        (default: \"noop_ranker\")\n  --input-parser INPUT-PARSER\n                        The input parser to use; available:\n                        noop_input_parser, base_input_parser (default:\n                        \"noop_input_parser\")\n  -h, --help            show this help message and exit","category":"page"},{"location":"clientserver/#","page":"Client/Server","title":"Client/Server","text":"Assuming that a search server is running and listening at /tmp/some/socket, querying the server can be done with:","category":"page"},{"location":"clientserver/#","page":"Client/Server","title":"Client/Server","text":"$ ./garc \"a test query\" -u /tmp/some/socket --max-matches 5 --pretty --return-fields one two three\nElapsed search time: 0.0007750988006591797s.\n1/1 search ensemble yielded 5 results.\nsearcher-1\n[0.55555475] ~ one: 4000.0 two: test  three: X15 _linear_id: 15\n[0.52799106] ~ one: 2000.0 two: query  three: X42 _linear_id: 42\n...","category":"page"},{"location":"clientserver/#garw:-Web-socket-client-1","page":"Client/Server","title":"garw: Web-socket client","text":"","category":"section"},{"location":"clientserver/#","page":"Client/Server","title":"Client/Server","text":"The web client garw starts a HTTP server that locally serves a page: it is the page that has to connect to the search server through a user-specified web-socket. Therefore, garw is technically not fully a client but for the sake of consistency we will consider it to be one. Its commandline arguments are more simplistic:","category":"page"},{"location":"clientserver/#","page":"Client/Server","title":"Client/Server","text":"$ ./garw --help\nusage: garw [--log-level LOG-LEVEL] [-w WEB-SOCKET-PORT]\n            [--web-socket-ip WEB-SOCKET-IP] [-p HTTP-PORT]\n            [--web-page WEB-PAGE] [--return-fields [RETURN-FIELDS...]]\n            [-h]\n\noptional arguments:\n  --log-level LOG-LEVEL\n                        logging level (default: \"warn\")\n  -w, --web-socket-port WEB-SOCKET-PORT\n                        WEB socket data communication port (type:\n                        UInt16, default: 0x0000)\n  --web-socket-ip WEB-SOCKET-IP\n                        WEB socket data communication IP (default:\n                        \"127.0.0.1\")\n  -p, --http-port HTTP-PORT\n                        HTTP port for the http server (type: Int64,\n                        default: 8888)\n  --web-page WEB-PAGE   Search web page to serve\n  --return-fields [RETURN-FIELDS...]\n                        List of fields to return (ignores wrong names)\n  -h, --help            show this help message and exit","category":"page"},{"location":"clientserver/#","page":"Client/Server","title":"Client/Server","text":"Assuming a search server is running using a web socket at port 9100 (as in the first gars example above), one can start serving the default webpage at the default port by simply running:","category":"page"},{"location":"clientserver/#","page":"Client/Server","title":"Client/Server","text":"$ ./garw -w 9100\n[ Info: ~ GARAMOND ~ (web-socket client)\n[ Info: Serving page on 127.0.0.1:8888","category":"page"},{"location":"clientserver/#","page":"Client/Server","title":"Client/Server","text":"Using a browser, one can open the page at locahost:8888 and search.","category":"page"},{"location":"clientserver/#HTTP-client-1","page":"Client/Server","title":"HTTP client","text":"","category":"section"},{"location":"clientserver/#","page":"Client/Server","title":"Client/Server","text":"A generic HTTP client such as curl can easily be used. Assuming that the search server listens at localhost:9000,","category":"page"},{"location":"clientserver/#","page":"Client/Server","title":"Client/Server","text":"$curl -d '{<request JSON content>}' -H \"Content-Type: application/json\" http://localhost:9000/api/search","category":"page"},{"location":"clientserver/#","page":"Client/Server","title":"Client/Server","text":"will send a request to the server. The content of the request is a JSON file conforming to the REST API specification.","category":"page"},{"location":"clientserver/#rest-api-specification-1","page":"Client/Server","title":"REST API","text":"","category":"section"},{"location":"clientserver/#","page":"Client/Server","title":"Client/Server","text":"The REST API exposes the search engine's functionality through HTTP requests. These can be either GET requests (for simple functionality) or POST requests, in which the body of the message contains a correctly formatted JSON string.","category":"page"},{"location":"clientserver/#Endpoints-1","page":"Client/Server","title":"Endpoints","text":"","category":"section"},{"location":"clientserver/#","page":"Client/Server","title":"Client/Server","text":"Assuming a search server listening at <ip>:<port>, the exposed API endpoints are:","category":"page"},{"location":"clientserver/#","page":"Client/Server","title":"Client/Server","text":"operation HTTP request type URI description\nSearch POST http://<ip>:<port>/api/search Searches for a given input in the indexed data\nRecommend POST http://<ip>:<port>/api/recommend Returns a list of similar entities to one specified, using a specified recommender\nRank POST http://<ip>:<port>/api/rank Ranks a given list of ids using a specified ranker\nEnvironment-related POST http://<ip>:<port>/api/envop Saves, loads or re-indexes a full search environment (data + searchers)\nKill GET http://<ip>:<port>/api/kill Kills the  operation\nGet configuration GET http://<ip>:<port>/api/read-configs Returns the data configuration of the engine","category":"page"},{"location":"clientserver/#HTTP-status-codes-1","page":"Client/Server","title":"HTTP status codes","text":"","category":"section"},{"location":"clientserver/#","page":"Client/Server","title":"Client/Server","text":"HTTP 200 returned when the request is correct\nHTTP 400 returned when the request is malformed\nHTTP 501 returned for a wrong URI","category":"page"},{"location":"clientserver/#Request-body-format-1","page":"Client/Server","title":"Request body format","text":"","category":"section"},{"location":"clientserver/#","page":"Client/Server","title":"Client/Server","text":"The specific functionality of the engine operations i.e. search, ranking is set through parameters passed in the HTTP request body. The underlying format of the request body is JSON, of the form:","category":"page"},{"location":"clientserver/#","page":"Client/Server","title":"Client/Server","text":"{\n    \"<key>\":<value>,\n }","category":"page"},{"location":"clientserver/#","page":"Client/Server","title":"Client/Server","text":"The following tables detail the key names, types and default values for each operation supported by the engine.","category":"page"},{"location":"clientserver/#","page":"Client/Server","title":"Client/Server","text":"note: Note\nThe default values present in the tables below are found in https://github.com/zgornel/Garamond.jl/blob/master/src/config/defaults.jl","category":"page"},{"location":"clientserver/#","page":"Client/Server","title":"Client/Server","text":"Search","category":"page"},{"location":"clientserver/#","page":"Client/Server","title":"Client/Server","text":"key required type default description\nquery ✓ String - The input query.\ninput_parser ✓ String - Input parser to use. Available: \"noop_input_parser\" (no specific parsing) and \"base_input_parser\" (constructs data filters and queries).\nreturn_fields ✓ List of strings - A list with the names of the database columns to be returned.\nsort_fields - List of strings DEFAULT_SORT_FIELDS A list with the names for the fields to sort by when filtering. Sort precedence is given by list order.\nsort_reverse - Boolean DEFAULT_SORT_REVERSE Flag specifying whether to reverse the sorting i.e. largest number/letter first.\nsearch_method - String DEFAULT_SEARCH_METHOD Default search method. Only used by \"search_recommender\".\nsearchable_filters - List of strings <empty list> A list of field names whose values will be inserted in the search query if the fields are used for filtering in the query.\nmax_matches - Integer DEFAULT_MAX_MATCHES The maximum number of search results to generate internally from each searcher. Note that still response_size recommendations are returned.\nresponse_size - Integer DEFAULT_RESPONSE_SIZE The maximum number of results to return in the response.\nresponse_page - Integer DEFAULT_RESPONSE_PAGE Which page of response_size results to return in the response.\nmax_suggestions - Integer DEFAULT_MAX_SUGGESTIONS The maximum number of suggestions to return for each mismatched keyword of the query.\ncustom_weights - Dictionary DEFAULT_CUSTOM_WEIGHTS A dictionary where the keys are strings with searcher ids and the values are weights of the result scores to be used in result aggregation (if the case). In this way, the importance of search results from different searchers can be tuned.\nranker - String DEFAULT_RANKER_NAME The name of the ranker. Available: \"noop_ranker\" (no ranking).","category":"page"},{"location":"clientserver/#","page":"Client/Server","title":"Client/Server","text":"Recommend","category":"page"},{"location":"clientserver/#","page":"Client/Server","title":"Client/Server","text":"key required type default description\nrecommender ✓ String - The name of the recommender to use. Available: \"noop_recommender\" (no recommendation) and \"search_recommender\" (search-based recommender).\nrecommend_id ✓ String - The id of the record for which recommendations (similar items) are sought.\nrecommend_id_key ✓ String - The database name of the column holding the recommend id.\ninput_parser ✓ String - Input parser to use. Available: \"noop_input_parser\" (no specific parsing) and \"base_input_parser\" (constructs data filters and queries). The \"base_input_parser\" has to be used with \"search_recommender\".\nfilter_fields ✓ List of strings - Contains the names of the fields that will be used by the recommender. Only used in \"search_recommender\".\nreturn_fields ✓ List of strings - A list with the names of the database columns to be returned.\nsort_fields - List of strings DEFAULT_SORT_FIELDS A list with the names for the fields to sort by when filtering. Sort precedence is given by list order.\nsort_reverse - Boolean DEFAULT_SORT_REVERSE Flag specifying whether to reverse the sorting i.e. largest number/letter first.\nsearch_method - String DEFAULT_SEARCH_METHOD Default search method. Only used by \"search_recommender\".\nsearchable_filters - List of strings <empty list> A list of field names whose values will be inserted in the search query sent to the searchers, if the field names appear also in filter_fields. This guarantees a better match between results returned by querying the database (filtering) and the indexed data (search).\nmax_matches - Integer DEFAULT_MAX_MATCHES The maximum number of recommendations to generate internally. Note that still response_size recommendations are returned.\nresponse_size - Integer DEFAULT_RESPONSE_SIZE The maximum number of results to return in the response.\nresponse_page - Integer DEFAULT_RESPONSE_PAGE Which page of response_size results to return in the response.\nranker - String DEFAULT_RANKER_NAME The name of the ranker. Available: \"noop_ranker\" (no ranking).","category":"page"},{"location":"clientserver/#","page":"Client/Server","title":"Client/Server","text":"Rank","category":"page"},{"location":"clientserver/#","page":"Client/Server","title":"Client/Server","text":"key required type default description\nranker ✓ String - The name of the ranker. Available: \"noop_ranker\" (no ranking).\nrank_ids ✓ List of strings - The ids to be ranked.\nrank_id_key ✓ String - The database name of the column holding the ids to be ranked.\nreturn_fields ✓ List of strings - A list with the names of the database columns to be returned.\nresponse_size - Integer DEFAULT_RESPONSE_SIZE The maximum number of results to return in the response.\nresponse_page - Integer DEFAULT_RESPONSE_PAGE Which page of response_size results to return in the response.","category":"page"},{"location":"clientserver/#","page":"Client/Server","title":"Client/Server","text":"Environment-related","category":"page"},{"location":"clientserver/#","page":"Client/Server","title":"Client/Server","text":"key required type default description\ncmd ✓ String - The operation being performed. Available: \"load\", \"save\" and \"reindex\".\ncmd_argument ✓ String - Argument of the operation. For \"load\" and \"save\" it should be a filepath, for \"reindex\", the searcher id or *.","category":"page"},{"location":"clientserver/#","page":"Client/Server","title":"Client/Server","text":"Kill","category":"page"},{"location":"clientserver/#","page":"Client/Server","title":"Client/Server","text":"No parameters needed.","category":"page"},{"location":"clientserver/#","page":"Client/Server","title":"Client/Server","text":"Get configuration","category":"page"},{"location":"clientserver/#","page":"Client/Server","title":"Client/Server","text":"No parameters needed.","category":"page"},{"location":"clientserver/#Response-format-1","page":"Client/Server","title":"Response format","text":"","category":"section"},{"location":"clientserver/#","page":"Client/Server","title":"Client/Server","text":"If the search, recommendation and ranking requests are successful a HTTP response with status code 200 is received. The body of the HTTP response message is a JSON string representing the actual results of the operation. Its keys and values are detailed below:","category":"page"},{"location":"clientserver/#","page":"Client/Server","title":"Client/Server","text":"key type description\nn_searchers Integer The total number of searchers.\nn_searchers_w_results Integer The total number of searchers that returned data.\nsuggestions Dictionary A dictionary containing for each searcher, a list of suggestions for each missing token.\nelapsed_time Float The time elapsed in executing the request, except for the building of results.\nresults Dictionary A dictionary containing for each searcher a list of dictionaries, each of the latter containing individual result data. For filtering operations, a random id is generated to which the list of results is associated.\nn_total_results Integer The total number of results returned by the engine.","category":"page"},{"location":"clientserver/#","page":"Client/Server","title":"Client/Server","text":"For more information on how the internal engine result structure is used to construct the JSON output, consult the build_response function.","category":"page"},{"location":"configuration/#Configuration-1","page":"Configuration","title":"Configuration","text":"","category":"section"},{"location":"configuration/#","page":"Configuration","title":"Configuration","text":"The configuration options of the Garamond search engine can be logically split into three main categories, based on what is configured and where the options actually reside:","category":"page"},{"location":"configuration/#","page":"Configuration","title":"Configuration","text":"indexing and search - this configuration pertains to the way the data loaded, indexed and searched. In this category one can count options such as the type of search being performed, the path to the actual files to be indexed, the specific parser to use, the path and type of embeddings libraries to be used for semantic search and so on. The data configuration format is a simple JSON file.\nsearch engine - the engine configuration file is a simple run-control file named .garamondrc that has to reside in the user home directory on UNIX-like systems i.e. ~/.garamondrc. The configuration file is parsed entirely as Julia code at the startup of the search server - if the file exists - and pre-compiled into the engine itself. The file defines options that pertain to external programs such as the pdf to text converter and replacement values for several default internal variables of the engine such as how many search results to return by default, the maximum edit distance to be used when searching for suggestions for possibly misspelled query terms and so on.\ninternal - it is made of the default values for various parameters as well as necessary constants such as text preprocessing flags. These defaults are found in src/config/defaults.jl and can be modified prior to running the search server.","category":"page"},{"location":"configuration/#Data-configuration-1","page":"Configuration","title":"Data configuration","text":"","category":"section"},{"location":"configuration/#","page":"Configuration","title":"Configuration","text":"warning: Missing data configuration options\nFor a developers view on the usage of the data configuration options, check the sample configuration files and the data configuration parser. It is important to note that some of these options may change quite frequently as the engine is under heavy development w.r.t. the data API.","category":"page"},{"location":"configuration/#Engine-configuration-1","page":"Configuration","title":"Engine configuration","text":"","category":"section"},{"location":"configuration/#","page":"Configuration","title":"Configuration","text":"A sample ~/.garamondrc file with all available configuration options filled would look like:","category":"page"},{"location":"configuration/#","page":"Configuration","title":"Configuration","text":"# Text to pdf program\nconst PDFTOTEXT_PROGRAM = \"/bin/pdftotext\"\n\n# Maximum edit distance for suggestion search\nconst MAX_EDIT_DISTANCE = 2\n\n# Default maximum matches to return\nconst MAX_MATCHES = 1_000\n\n# Default maximum number of suggestions to return\n# for each non-matched query term when squashing\n# results from several corpora\nconst MAX_SUGGESTIONS = 10\n\n# Default approach to combine the retrieved document\n# scores from multiple searchers\nconst RESULT_AGGREGATION_STRATEGY = :mean","category":"page"},{"location":"configuration/#Internal-configuration-1","page":"Configuration","title":"Internal configuration","text":"","category":"section"},{"location":"configuration/#","page":"Configuration","title":"Configuration","text":"The full internal configuration of the engine can be readily viewed in src/config/defaults.jl.","category":"page"},{"location":"#","page":"Introduction","title":"Introduction","text":"CurrentModule=Garamond","category":"page"},{"location":"#","page":"Introduction","title":"Introduction","text":"warning: Work in progress!\nThe engine is currently under heavy development and the documentation may be slightly out of date. As the API stabilizes, both the content and scope of the present documentation will increase. For any inquiries, bugs or feature requests, be sure to contact the developers or file an issue.","category":"page"},{"location":"#Introduction-1","page":"Introduction","title":"Introduction","text":"","category":"section"},{"location":"#","page":"Introduction","title":"Introduction","text":"Garamond is a small, flexible neural and data search engine. Search functionality available through API method calls from Julia code or through communication with a Garamond search server.","category":"page"},{"location":"#Installation-1","page":"Introduction","title":"Installation","text":"","category":"section"},{"location":"#","page":"Introduction","title":"Introduction","text":"The Garamond repository can be downloaded through git:","category":"page"},{"location":"#","page":"Introduction","title":"Introduction","text":"$ git clone https://github.com/zgornel/Garamond.jl","category":"page"},{"location":"#","page":"Introduction","title":"Introduction","text":"or from inside Julia. Entering the Pkg mode with ] and writing:","category":"page"},{"location":"#","page":"Introduction","title":"Introduction","text":"add https://github.com/zgornel/Garamond.jl#master","category":"page"},{"location":"#","page":"Introduction","title":"Introduction","text":"downloads the master branch of the repository and adds Garamond to the current active environment.","category":"page"},{"location":"#Architecture-1","page":"Introduction","title":"Architecture","text":"","category":"section"},{"location":"#","page":"Introduction","title":"Introduction","text":"(Image: )","category":"page"},{"location":"#","page":"Introduction","title":"Introduction","text":"Architecturally, the engine employs an analytical database and a series of search indexes to perform the search. The database acts as data source to create the indexes (searcher objects), for building responses for clients and as input source for the ranking and recommendation operations. Incoming search/recommendation/ranking requests are parsed to an internal request format and sent to the database and searchers, depending on the request. Each searcher has its own characteristics i.e. ways of embedding documents, searching through the vectors. Search results from searchers can be combined in a variety of ways. The results are then filtered, aggregated and a response is built and sent to the client. Any number of searcher objects can be created and each of these can re-use data embedders i.e. objects that transform data into numerical vectors. Data can be either indexed while the engine is running online i.e. pushed into all indexes plus database or, by fully reloading and reindexing. The engine supports runtime compilation of  custom data loaders, parsers, rankers and recommenders. These can be thin clients that connect i.e. through TCP sockets, HTTP, to external systems that perform the actual workload, provided that the internal client APIs are implemented.","category":"page"},{"location":"#Main-features-1","page":"Introduction","title":"Main features","text":"","category":"section"},{"location":"#","page":"Introduction","title":"Introduction","text":"In-memory analytical db based on JuliaDB\nPluggable support for custom parsers, loaders, recommenders and rankers\nMillon-scale indexing using hnsw\nBillion-scale search through IVFADC\nOnline indexing i.e. fast push/pop to/from index and db\nRuntime batch re-indexing i.e. reindex while operating\nHTTP(REST), Web-socket and UNIX socket connectivity\nComplex query search patterns supported\nData embedders are a shared resource - each searcher can have different input and data embedders\nWordvectors support: Word2Vec, ConceptnetNumberbatch, GloVe\nCompressed vector support for low-memory footprint using array quantization\nClassic search based on term frequency, tf-idf, bm25\nSuggestion support using BK Trees\nMany state-of-the-art neural document and sentence embedding methods\nMulti-threading supported\nCaching mechanisms for fast resume\nPortable and statically compilable to many architectures","category":"page"},{"location":"#Longer-term-plans-1","page":"Introduction","title":"Longer term plans","text":"","category":"section"},{"location":"#","page":"Introduction","title":"Introduction","text":"Extend search to Images, Videos and Audio i.e. generic search\nPeer-to-peer / distributed operations support","category":"page"},{"location":"build/#Building-1","page":"Building","title":"Building","text":"","category":"section"},{"location":"build/#","page":"Building","title":"Building","text":"Garamond apps for the search server and clients can be built by running the build/build_apps.jl script. The script will compile  the gars, garc and garw apps  using PackageCompiler and place the compilation results in in /build/compiled. The script will make all necessary checks and install packages needed for the compilation.","category":"page"},{"location":"build/#","page":"Building","title":"Building","text":"tips: Tips\nThe script will remove the contents of the build/compiled directory, removing any previous compilation output. Make sure the binaries are backed up before re-running the process.\nThe compilation works best on Linux systems with the official binary packages rather than the distribution specific ones. The official julia binaries can be downloaded here.","category":"page"},{"location":"build/#","page":"Building","title":"Building","text":"At the end of the compilation process, the build/compiled will have the structure:","category":"page"},{"location":"build/#","page":"Building","title":"Building","text":"$ tree -L 2 build/compiled                                                                                                                                                       (cc-packagecompiler↑2|✚1)\nbuild/compiled\n├── garc\n│   ├── bin\n│   └── lib\n├── gars\n│   ├── artifacts\n│   ├── bin\n│   └── lib\n└── garw\n    ├── artifacts\n    ├── bin\n    └── lib\n\n11 directories, 0 files","category":"page"}]
}
